name: CI

on: [push]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Analysing the code with pylint
        run: |
          pylint $(find . -name "*.py" | xargs)

  unit_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Patch server settings file
        run: |
          patch < server/server/settings.patch server/server/settings.py
      - name: Run unit tests
        run: |
          python server/manage.py test task_director.test
          python -m unittest discover client

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Patch server settings file
        run: |
          patch < server/server/settings.patch server/server/settings.py
      - name: Generate Coverage Report
        run: |
          pip install coverage
          coverage run --source='.' server/manage.py test task_director.test
          coverage xml -o server_coverage.xml
          coverage run --source='.' -m unittest discover client
          coverage xml -o client_coverage.xml
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: server_coverage.xml,client_coverage.xml
          fail_ci_if_error: true
          verbose: true

  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        example-name: ["sleep", "bazel"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Build client package
        run: |
          python -m build client/
      - name: Start redis container for django channels
        run: |
          docker run -p 6379:6379 -d redis:5
      - name: Run integration test
        run: |
          ./examples/${{ matrix.example-name }}/run-example.sh

  docker_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: server/Dockerfile

  client_package_release:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [pylint, unit_tests, coverage, integration]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Build client package
        run: |
          python -m build client/
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M-%S')"
      - name: Check if client paths have been modified
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            client:
              - 'client/src/**'
              - 'client/pyproject.toml'
              - 'client/setup.cfg'
      - name: Create Github release with built artefacts
        if: steps.filter.outputs.client == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: client-${{ steps.date.outputs.date }}
          files: |
            client/dist/task_sharding_client_alexander_scott-0.0.1-py3-none-any.whl
            client/dist/task-sharding-client-alexander-scott-0.0.1.tar.gz

  docker_build_and_push:
    needs: [docker_lint, pylint, unit_tests, coverage, integration]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.WRITE_PACKAGES_TOKEN }}
      - name: Build and push the server docker image
        uses: docker/build-push-action@v2
        with:
          context: ./server
          target: server
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/alexander-scott/task-sharding/server:latest
      - name: Build and push the controller docker image
        uses: docker/build-push-action@v2
        with:
          context: ./server
          target: controller
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/alexander-scott/task-sharding/controller:latest
